// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	v1alpha1 "github.com/argoproj-labs/ephemeral-access/api/ephemeral-access/v1alpha1"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CreateAccessRequest provides a mock function with given fields: ctx, ar
func (_m *MockService) CreateAccessRequest(ctx context.Context, ar *v1alpha1.AccessRequest) (*v1alpha1.AccessRequest, error) {
	ret := _m.Called(ctx, ar)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessRequest")
	}

	var r0 *v1alpha1.AccessRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.AccessRequest) (*v1alpha1.AccessRequest, error)); ok {
		return rf(ctx, ar)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.AccessRequest) *v1alpha1.AccessRequest); ok {
		r0 = rf(ctx, ar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.AccessRequest) error); ok {
		r1 = rf(ctx, ar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CreateAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessRequest'
type MockService_CreateAccessRequest_Call struct {
	*mock.Call
}

// CreateAccessRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - ar *v1alpha1.AccessRequest
func (_e *MockService_Expecter) CreateAccessRequest(ctx interface{}, ar interface{}) *MockService_CreateAccessRequest_Call {
	return &MockService_CreateAccessRequest_Call{Call: _e.mock.On("CreateAccessRequest", ctx, ar)}
}

func (_c *MockService_CreateAccessRequest_Call) Run(run func(ctx context.Context, ar *v1alpha1.AccessRequest)) *MockService_CreateAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.AccessRequest))
	})
	return _c
}

func (_c *MockService_CreateAccessRequest_Call) Return(_a0 *v1alpha1.AccessRequest, _a1 error) *MockService_CreateAccessRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_CreateAccessRequest_Call) RunAndReturn(run func(context.Context, *v1alpha1.AccessRequest) (*v1alpha1.AccessRequest, error)) *MockService_CreateAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessBindings provides a mock function with given fields: ctx, name, namespace
func (_m *MockService) GetAccessBindings(ctx context.Context, name string, namespace string) ([]*v1alpha1.AccessBinding, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessBindings")
	}

	var r0 []*v1alpha1.AccessBinding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*v1alpha1.AccessBinding, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*v1alpha1.AccessBinding); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.AccessBinding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessBindings'
type MockService_GetAccessBindings_Call struct {
	*mock.Call
}

// GetAccessBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockService_Expecter) GetAccessBindings(ctx interface{}, name interface{}, namespace interface{}) *MockService_GetAccessBindings_Call {
	return &MockService_GetAccessBindings_Call{Call: _e.mock.On("GetAccessBindings", ctx, name, namespace)}
}

func (_c *MockService_GetAccessBindings_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockService_GetAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetAccessBindings_Call) Return(_a0 []*v1alpha1.AccessBinding, _a1 error) *MockService_GetAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAccessBindings_Call) RunAndReturn(run func(context.Context, string, string) ([]*v1alpha1.AccessBinding, error)) *MockService_GetAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessRequest provides a mock function with given fields: ctx, name, namespace
func (_m *MockService) GetAccessRequest(ctx context.Context, name string, namespace string) (*v1alpha1.AccessRequest, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessRequest")
	}

	var r0 *v1alpha1.AccessRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.AccessRequest, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.AccessRequest); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessRequest'
type MockService_GetAccessRequest_Call struct {
	*mock.Call
}

// GetAccessRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockService_Expecter) GetAccessRequest(ctx interface{}, name interface{}, namespace interface{}) *MockService_GetAccessRequest_Call {
	return &MockService_GetAccessRequest_Call{Call: _e.mock.On("GetAccessRequest", ctx, name, namespace)}
}

func (_c *MockService_GetAccessRequest_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockService_GetAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetAccessRequest_Call) Return(_a0 *v1alpha1.AccessRequest, _a1 error) *MockService_GetAccessRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAccessRequest_Call) RunAndReturn(run func(context.Context, string, string) (*v1alpha1.AccessRequest, error)) *MockService_GetAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppProject provides a mock function with given fields: ctx, name, namespace
func (_m *MockService) GetAppProject(ctx context.Context, name string, namespace string) (*unstructured.Unstructured, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetAppProject")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *unstructured.Unstructured); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAppProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppProject'
type MockService_GetAppProject_Call struct {
	*mock.Call
}

// GetAppProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockService_Expecter) GetAppProject(ctx interface{}, name interface{}, namespace interface{}) *MockService_GetAppProject_Call {
	return &MockService_GetAppProject_Call{Call: _e.mock.On("GetAppProject", ctx, name, namespace)}
}

func (_c *MockService_GetAppProject_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockService_GetAppProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetAppProject_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *MockService_GetAppProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAppProject_Call) RunAndReturn(run func(context.Context, string, string) (*unstructured.Unstructured, error)) *MockService_GetAppProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplication provides a mock function with given fields: ctx, name, namespace
func (_m *MockService) GetApplication(ctx context.Context, name string, namespace string) (*unstructured.Unstructured, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *unstructured.Unstructured); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplication'
type MockService_GetApplication_Call struct {
	*mock.Call
}

// GetApplication is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockService_Expecter) GetApplication(ctx interface{}, name interface{}, namespace interface{}) *MockService_GetApplication_Call {
	return &MockService_GetApplication_Call{Call: _e.mock.On("GetApplication", ctx, name, namespace)}
}

func (_c *MockService_GetApplication_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockService_GetApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetApplication_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *MockService_GetApplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetApplication_Call) RunAndReturn(run func(context.Context, string, string) (*unstructured.Unstructured, error)) *MockService_GetApplication_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
